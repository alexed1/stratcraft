(
    {
        /** Returns the type that will be treated as root type (all subexpression will start from this type).
         * If specified mode supports access to the global objects (like $Record or $User) we introduce a fake type called '$global'.
         * This type will have all the global variables as its properties, thus we'll work with all levels of properties in the same manner
         * @param {Array} typeList the list of all types available to the current user
         * @param {string} mode allowed values are: soql, if, gate
         */
        _getRootType: function (typeList, mode, contextType) {
            var addLocalObjects = false;
            var addGlobalObjects = false;
            switch (mode) {
                case 'filter':
                    addLocalObjects = true;
                    //addGlobalObjects = true;
                    break;
                case 'if':
                    addGlobalObjects = true;
                    break;
                case 'soql':
                    addLocalObjects = true;
                    break;
            }
            var resultType = null;
            if (addGlobalObjects) {
                resultType = {
                    name: '$global',
                    label: '$global',
                    fieldList: []
                };
                resultType.fieldList.push({
                    name: '$Record',
                    label: 'The ' + (contextType ? contextType : 'record') + ' passed in when the strategy runs',
                    isReference: true,
                    type: contextType
                });
                resultType.fieldList.push({
                    name: '$User',
                    label: 'The user currently logged in the organization',
                    type: 'User',
                    isReference: true
                });
                typeList.push(resultType);
            }
            if (addLocalObjects) {
                //Here we assume that we operate only on Proposition objects, so nothing else can funciton as a current item
                //Otherwise, this will be a good place to add traversal logic to check what object types are generated by the children of the current node
                //TODO: probably worth checking if Proposition type exists (but it seems it is a standard one so it should exist)
                if (resultType) {
                    // resultType.fieldList.push({
                    //     name: '$Item',
                    //     label: '$Item',
                    //     type: 'Proposition',
                    //     isReference: true
                    // });
                } else {
                    resultType = typeList.find(function (type) { return type.name === 'Proposition'; });
                }
            }
            return resultType;
        },

        focusSubExpression: function (cmp, index) {
            window.setTimeout($A.getCallback(function () {
                var subExpressions = cmp.find('subExpression');
                if (!subExpressions) {
                    return;
                }
                var subExpression = Array.isArray(subExpressions)
                    ? subExpressions.find(function (subExpressionCmp) { return subExpressionCmp.get('v.subExpressionIndex') == index; })
                    : subExpressions;
                if (!subExpression) {
                    return;
                }
                subExpression.focus();
            }), 100);
        },
        /** Parses specified expression into sub expressions using specified mode and schema
         * @param {string} expression expression to parse
         * @param {object} schema object that contains info about all types and their respective fields
         */
        parseExpression: function (expression, schema) {
            var result = _expressionParser.parseExpression(expression, schema);
            if (result && result.length === 0) {
                result.push(_expressionParser.createNewSubExpression(schema));
            }
            return result;
        },

        _stringifyExpression: function (expression) {
            if (!expression) {
                return '';
            }
            if (expression.length > 0) {
                var subExpressions = expression.map(function (item) { return item.toString(); })
                    .filter(function (item) { return item; });
                return subExpressions.join(' OR ');
            }
            return '';
        },

        validate: function (cmp) {
            var isBuilderMode = cmp.get('v.isBuilderMode');
            if (!isBuilderMode) {
                return true;
            }
            var subExpressonsCmp = cmp.find('subExpression');
            if (!Array.isArray(subExpressonsCmp)) {
                subExpressonsCmp = [subExpressonsCmp];
            }
            //First lets try to use whatever is entered in the textboxes as the expression value
            var result = subExpressonsCmp.reduce(function (result, subExpressionCmp) {
                return result & subExpressionCmp.tryFinalize();
            }, true);
            return result;
        },

        resolveExpression: function (cmp) {
            if (!this.validate(cmp)) {
                return '';
            }
            var isBuilderMode = cmp.get('v.isBuilderMode');
            var stringExpression = cmp.get('v.expression');
            if (isBuilderMode) {
                var expression = cmp.get('v.subExpressions');
                return this._stringifyExpression(expression);
            }
            return stringExpression;
        },

        initializeBuilder: function (cmp) {
            var expression = cmp.get('v.expression');
            var schema = cmp.get('v._schema');
            var subExpressions = this.parseExpression(expression, schema);
            if (!subExpressions) {
                cmp.set('v.isBuilderMode', false);
                cmp.set('v.isLoading', false);
                return;
            }
            cmp.set('v.subExpressions', subExpressions);
            cmp.set('v.isLoading', false);
        },
        /** Builds a schema object that contains the type that is used by the all subexpression as a root one, a collection of all types and a map of this types by their names
         * @param {Array} typeList the list of all the types available to the current user
         * @param {string} mode allowed vlaues are: soql, if, gate
         */
        buildSchema: function (typeList, mode, contextType) {
            var rootType = this._getRootType(typeList, mode, contextType);
            var schema = {
                rootType: rootType,
                typeList: typeList,
                typeNameMap: typeList.reduce(function (result, item) {
                    result[item.name] = item;
                    return result;
                }, {})
            };
            schema.typeList.forEach(function (type) {
                type.fieldNameMap = type.fieldList.reduce(function (result, field) {
                    result[field.name.toLowerCase()] = field;
                    return result;
                }, {});
                type.lookupFields = type.fieldList.map(function (field) { return { type: type, field: field } });
            });
            //This field will contain collection of pairs (field, owningType) for all fields of all types
            schema.lookupFields = schema.typeList.reduce(function (result, type) {
                return result.concat(type.lookupFields);
            }, []);
            return schema;
        }




    })
